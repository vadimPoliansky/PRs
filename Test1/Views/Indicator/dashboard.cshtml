@model IndInv.Models.ViewModels.indexViewModel
@{
    ViewBag.Title = "Search Results";
    ViewBag.fiscalYear = Model.Fiscal_Year;
	var fiscalYear = Model.Fiscal_Year;
}



<div class="container">
    <!-- Push Wrapper -->
    <div class="mp-pusher" id="mp-pusher">

        <nav id="menuFilter3D" class="mp-menu">
            <div class="mp-level">
            <h2 class="backBtnMain mp-back"><i class="fa fa-times backBtnMain mp-back"></i>Filter by:</h2>
            <ul>
                <li>
                    <a href="#"><i class="fa fa-filter"></i>CoE</a>
                    <div class="mp-level">
                        <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by CoE:</h2>
                        <ul class="doubleList">
                            @foreach (var coe in Model.allCoEs)
                            {
                                <li>
                                    <small><a href="#" class="filterMenuItem" field="coeID" id="@coe.CoE_ID" name="@coe.CoE"><i class="fa fa-angle-right"></i> @coe.CoE_Abbr </a></small>
                                </li>
                            }
                        </ul>
                    </div>
                </li>
                <li>
                    <a href="#"><i class="fa fa-filter"></i>Quadrant</a>
                    <div class="mp-level">
                        <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by Quadrant:</h2>
                        <ul>
                            @foreach (var area in Model.allAreas)
                            {
                                <li>
                                    <small><a href="#" class="filterMenuItem" field="areaID" id="@area.Area_ID" name="@area.Area"><i class="fa fa-angle-right"></i> @area.Area</a></small>
                                </li>
                    }
                        </ul>
                    </div>
                </li>
                <li>
                    <a href="#"><i class="fa fa-filter"></i>Type</a>
                    <div class="mp-level">
                        <h2 class="backBtn mp-back"><i class="fa fa-times backBtn mp-back"></i>Filter by Type:</h2>
                        <ul>
                            @foreach (var footnote in Model.allFootnotes)
                            {
                                <li>
                                    <small><a href="#" class="filterMenuItem" field="footnoteID" id="@footnote.Footnote_ID" name="@footnote.Footnote"><i class="fa fa-angle-right"></i> @footnote.Footnote</a></small>
                                </li>
                    }
                        </ul>
                    </div>
                </li>
            </ul>
                </div>
        </nav>


        <div class="scroller">
            <div class="scroller-inner">
                <div id="pushList">
						<input class="search" id="search_input" name="Search" type="search" placeholder="Search" />
						<a><span id="trigger" class="filterExpand menu-trigger"><i class="fa fa-filter fa-2x"></i></span></a>

						<div class="inner-wrap">

							<div id="panel-indicatorlist">
							<ul id="myTags" class="tagList">
							</ul>
							<ul class="list">
								@foreach (var item in Model.allIndicators.OrderBy(x => x.Indicator))
								{
									var coeID = item.Indicator_CoE_Map.Count > 0 ? item.Indicator_CoE_Map.FirstOrDefault().CoE_ID : 0;
									var areaID = (int?)item.Area_ID ?? 0;
									<div class="block coeID-@coeID areaID-@areaID @foreach (var footnote in item.Indicator_Footnote_Map)
																				{ @:footnoteID-@footnote.Footnote_ID 
																				}" indicatorId="@item.Indicator_ID">
										<li>
											<div class="row blockContent">
												<div class="small-4 columns" style="font-size: small">
													<i class="fa fa-angle-right"></i>
													<span class="coe">@Html.DisplayTextFor(modelItem => item.Indicator_CoE_Map.FirstOrDefault().CoE.CoE_Abbr).ToString().Trim()</span>
													<br />
													<span class="area">@Html.DisplayTextFor(modelIem => item.Area.Area).ToString().Trim()</span>
												</div>
												<div class="small-8 columns titleColumn">
													<span class="title" style="font-size: small">@Html.DisplayTextFor(modelItem => item.Indicator).ToString().Trim()</span>
												</div>
											</div>
										</li>
									</div>
								}   
							</ul>
						</div>
						<div id="panel-side">
						</div>
					</div>
                </div>
            </div>
        </div>

    </div>
    <!-- /pusher -->
</div><!-- /container -->


<div id="menuFilter">
    <nav>
        <h2 class="backBtnMain"><i class="fa fa-times backBtnMain"></i>Filter by:</h2>
        <ul>
            <li>
                <a href="#"><i class="fa fa-filter"></i>CoE</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by CoE:</h2>
                <ul class="doubleList">
                    @foreach (var coe in Model.allCoEs)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="coeID" id="@coe.CoE_ID" name="@coe.CoE"><i class="fa fa-angle-right"></i> @coe.CoE_Abbr </a></small>
                        </li>
                    }
                </ul>
            </li>
            <li>
                <a href="#"><i class="fa fa-filter"></i>Quadrant</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by Quadrant:</h2>
                <ul>
                    @foreach (var area in Model.allAreas)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="areaID" id="@area.Area_ID" name="@area.Area"><i class="fa fa-angle-right"></i> @area.Area</a></small>
                        </li>
                    }
                </ul>
            </li>
            <li>
                <a href="#"><i class="fa fa-filter"></i>Type</a>
                <h2 class="backBtn"><i class="fa fa-times backBtn"></i>Filter by Type:</h2>
                <ul>
                    @foreach (var footnote in Model.allFootnotes)
                    {
                        <li>
                            <small><a href="#" class="filterMenuItem" field="footnoteID" id="@footnote.Footnote_ID" name="@footnote.Footnote"><i class="fa fa-angle-right"></i> @footnote.Footnote</a></small>
                        </li>
                    }
                </ul>
            </li>
        </ul>
    </nav>
</div>

<div class="overlay" id="overlay"></div>
<div id="chartTest" class="mlpush-chart" style="height:400px;"></div>
<div class="backToTop"><i class="fa fa-arrow-up"></i></div>

<script type="text/javascript" src="../../Scripts/jquery-1.11.0.min.js" ></script>
<script type="text/javascript" src="/../../Scripts/jquery-ui-1.8.20.min.js" ></script>
<script src="~/Scripts/highcharts.js"></script>
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.1/css/font-awesome.min.css">
<script src="~/Scripts/tag-it.min.js"></script>

<link rel="stylesheet" href="../../Scripts/jquery.multilevelpushmenu.css" />
<script type="text/javascript" src="../../Scripts/jquery.multilevelpushmenu.js" ></script>

<script type="text/javascript" src="~/Scripts/classie.js"></script>
<script type="text/javascript" src="~/Scripts/mlpushmenu.js"></script>


<script type="text/javascript">

    if (!$("html").hasClass("lt-ie9")) {
        new mlPushMenu(document.getElementById('menuFilter3D'), document.getElementById('trigger'));
    }

    $(document).ready(function ($) {

        $("#overlay").hide()

        $(".blockContent").on("click", function () {
        	var indicatorID = $(this).closest(".block").attr("indicatorID");
        	var currPath = window.location.pathname
        	//window.location.href = currPath.charAt(currPath.length - 1) == "/" ? "details?indicatorID=" + indicatorID + "&fiscalYear=" + @fiscalYear :
        	//                                                                        "details?indicatorID=" + indicatorID + "&fiscalYear=" + @fiscalYear ;
        	$('#panel-indicatorlist').width('50%');
        	$('#panel-side').width('50%');
        	$('.inner-wrap').width('50%');
        	$('#chartTest').width('50%%');
        	$('.active-indicator').removeClass('active-indicator')
        	$(this).closest('.block').addClass('active-indicator');
        	$.post('details',{ indicatorID: indicatorID, fiscalYear: @fiscalYear }, function(data){
        		var currency = false;
        		var time = false;
        		var precision;

        		var valuesArrayString = [
					data['FY_Q1'],
					data['FY_Q2'],
					data['FY_Q3'],
					data['FY_Q4'],
					data['FY_3_YTD'],
					data['FY_3_YTD'],
					data['FY_2_YTD'],
					data['FY_1_YTD'],
					data['FY_YTD'],
					data['Target'],
					data['Comparator']
        		];
        		for (i = 0; i < valuesArrayString.length; i++) {
        			if (valuesArrayString[i] != null) {
        				precision = valuesArrayString[i].indexOf('.') != -1 ? valuesArrayString[i].split('.')[1].length : 0;
        			}
        		}
        		var chartWidth = 300 - 20 - 20;

        		var regex = /[^0-9.]+/g;

        		var valuesArray = [
				isNaN(parseFloat(data['FY_Q1'], 10)) ?
                    "" : parseFloat(data['FY_Q1'], 10),
                isNaN(parseFloat(data['FY_Q2'], 10)) ?
                    "" : parseFloat(data['FY_Q2'], 10),
                isNaN(parseFloat(data['FY_Q3'], 10)) ?
                    "" : parseFloat(data['FY_Q3'], 10),
                isNaN(parseFloat(data['FY_Q4'], 10)) ?
                    "" : parseFloat(data['FY_Q4'], 10),
                isNaN(parseFloat(data['FY_1_YTD'], 10)) ?
                    "" : parseFloat(data['FY_1_YTD'], 10),
                isNaN(parseFloat(data['FY_2_YTD'], 10)) ?
                    "" : parseFloat(data['FY_2_YTD'], 10),
                isNaN(parseFloat(data['FY_3_YTD'], 10)) ?
                    "" : parseFloat(data['FY_3_YTD'], 10),
                isNaN(parseFloat(data['FY_YTD'], 10)) ?
                    "" : parseFloat(data['FY_YTD'], 10),
                isNaN(parseFloat(data['TargetNum'], 10)) ?
                    "" : parseFloat(data['TargetNum'], 10),
                isNaN(parseFloat(data['Comparator'], 10)) ?
                    "" : parseFloat(data['Comparator'], 10)
        		];

        		/*polyfill*/
        		if (!Array.prototype.filter) {
        			Array.prototype.filter = function (fun /*, thisp */) {
        				"use strict";

        				if (this === void 0 || this === null)
        					throw new TypeError();

        				var t = Object(this);
        				var len = t.length >>> 0;
        				if (typeof fun !== "function")
        					throw new TypeError();

        				var res = [];
        				var thisp = arguments[1];
        				for (var i = 0; i < len; i++) {
        					if (i in t) {
        						var val = t[i]; // in case fun mutates this
        						if (fun.call(thisp, val, i, t))
        							res.push(val);
        					}
        				}

        				return res;
        			};
        		}

        		function remove(arrOriginal, elementToRemove) {
        			return arrOriginal.filter(function (el) { return el !== elementToRemove });
        		}

        		var maxYarray = Math.max.apply(Math, valuesArray) + 0.01;
        		var maxY = maxYarray;
        		var maxLog = Math.pow(10, Math.floor(Math.log(maxY / 2) / Math.log(10))) / 2
        		if (maxY == 1) { precision = 1 }
        		maxY = Math.abs(maxYarray) > 1 ? Math.ceil(maxYarray / maxLog) * maxLog : maxYarray;

        		var minY = Math.min.apply(Math, remove(valuesArray, 0));
        		minY = Math.abs(minY) > 1 ? Math.floor(minY / 10) * 10 : minY
        		minY = minY < 0 ? minY : 0;

        		var tickInterval = Math.pow(10, Math.floor(Math.log(maxY / 2 - 0.01) / Math.log(10)));
        		tickInterval = maxY / tickInterval > 10 ? tickInterval * 2 : tickInterval;
        		tickInterval = maxY / tickInterval < 5 ? tickInterval / 2 : tickInterval;
        		maxY = maxY % tickInterval === 0 ? maxY : maxY + tickInterval / 2;
        		maxY = maxY / maxYarray > 2 ? maxY / 2 : maxY;

        		var s1 = [
					valuesArray[4],
					valuesArray[5],
					valuesArray[6],
					valuesArray[0],
					valuesArray[1],
					valuesArray[2],
					valuesArray[3],
					valuesArray[7],
        		];
        		var s2 = [
					valuesArray[4],
					valuesArray[5],
					valuesArray[6],
					valuesArray[7],
        		];

        		var sComparator = [
					0,
					0,
					0,
					valuesArray[9],
        		];

        		var sTarget = [
					0,
					0,
					0,
					valuesArray[8],
        		];

        		var sComparatorYTD = [
					valuesArray[9],
					valuesArray[9],
					valuesArray[9],
					valuesArray[9],
					valuesArray[9],
					valuesArray[9],
					valuesArray[9],
					valuesArray[9]
        		];

        		var sTargetYTD = [
					valuesArray[8],
					valuesArray[8],
					valuesArray[8],
					valuesArray[8],
					valuesArray[8],
					valuesArray[8],
					valuesArray[8],
					valuesArray[8]
        		];

        		var comparator_FY = valuesArray[9]
        		var target_FY = valuesArray[8]

        		var target_4 = valuesArray[8]

        		var ticks1 = ['FY1112','FY1213','FY1314','FY1415 Q1', 'FY1415 Q2', 'FY1415 Q3', 'FY1415 Q4','FY1415 YTD'];
        		//var ticks2 = ['FY2010', 'FY2011', 'FY2012', 'FY2013 YTD'];
        		var ticks2 = [
					'a','b','c','d'
        		];

        		$(function () {

        			Highcharts.setOptions({
        				colors: ['#368EBE', "#0094fe"],
        				chart: {
        					renderTo: 'chartTest',
        					type: 'column',
        					backgroundColor: "#2D3947"
        				},
        				title: {
        					style: {
        						color: '#fff'
        					}
        				},
        				subtitle: {
        					style: {
        						color: '#8c8c95'
        					}
        				},
        				plotOptions: {
        					column: {
        						stacking: 'normal'
        					},
        					series: {
        						states: {
        							hover: {
        								enabled: false
        							}
        						},
        						dataLabels: {
        							enabled: true,
        							inside: true,
        							color: '#fff'
        						},
        						borderWidth: 0,
        						shadow: false
        					}
        				},
        				tooltip: {
        					enabled: false
        				},
        				xAxis: {
        					labels: {
        						style: {
        							color: '#fff'
        						}
        					}
        				},
        				yAxis: {
        					gridLineColor: '#5C5C63',
        					gridLineWidth: 1,
        					labels: {
        						style: {
        							color: '#fff'
        						}
        					}
        				}
        			});

        			chart1 = new Highcharts.Chart({
        				title: {
        					text: 'test'
        				},
        				subtitle: {
        					text: 'for ' + 'test',
        				},
        				xAxis: {
        					categories: ticks1,
        					tickLength: 0,
        				},
        				yAxis: [{
        					title: {
        						text: ''
        					},
        					max: maxY,
        					plotLines: [{
        						color: '#ff6500',
        						value: sComparatorYTD[0],
        						width: '2',
        						percentFrom: 0,
        						percentTo: 0.25
        					}, {
        						color: '#ff6500',
        						value: sComparatorYTD[1],
        						width: '2',
        						percentFrom: 0.25,
        						percentTo: 0.5
        					}, {
        						color: '#ff6500',
        						value: sComparatorYTD[2],
        						width: '2',
        						percentFrom: 0.5,
        						percentTo: 0.75
        					}, {
        						color: '#ff6500',
        						value: sComparatorYTD[3],
        						width: '2',
        						percentFrom: 0.75,
        						percentTo: 1
        					}, {
        						color: 'red',
        						value: sTargetYTD[0],
        						width: '2',
        						percentFrom: 0,
        						percentTo: 0.25
        					}, {
        						color: 'red',
        						value: sTargetYTD[1],
        						width: '2',
        						percentFrom: 0.25,
        						percentTo: 0.5
        					}, {
        						color: 'red',
        						value: sTargetYTD[2],
        						width: '2',
        						percentFrom: 0.5,
        						percentTo: 0.75
        					}, {
        						color: 'red',
        						value: sTargetYTD[3],
        						width: '2',
        						percentFrom: 0.75,
        						percentTo: 1
        					}]
        				}],
        				series: [{
        					name: 'test',
        					data: s1,
        					index: 50
        				}],
        				legend: {
        					enabled: false
        				},
        				credits: [{
        					enabled: 'false'
        				}]
        			});
        		});
        	});
        });

    	$('#pushobjLazy').on('scroll',function(e){
    	});
        
        if ($("html").hasClass("lt-ie9")) {
            $('#menuFilter').multilevelpushmenu({
                fullCollapse: true,
                menuHeight: $(window).height(),
                collapsed: true,
                menuWidth: '30%',
                onExpandMenuStart: function () {
                    $("#overlay").fadeIn("fast");
                },
                onCollapseMenuStart: function () {
                    if ($('#menuFilter').multilevelpushmenu('activemenu').attr('data-level') == 0) {
                        $("#overlay").fadeOut("fast");
                    }
                },
            });

            $('.backItemClass').remove();

            $('.backBtn').on('click', function () {
                $('#menuFilter').multilevelpushmenu('collapse', 0)
            });

            $('.backBtnMain').on('click', function () {
                $('#menuFilter').multilevelpushmenu('collapse')
            });

            $('.filterExpand').click(function () {
                $('#menuFilter').multilevelpushmenu('expand');
            });

            $('#menuFilter').multilevelpushmenu('redraw');
        }

        var hidden = false;

        $('#search_input').on('keyup change search click', function () {
            var valThis = $(this).val().toLowerCase();
            if (valThis == "") {
                $(".block").removeClass('textFiltered');
            } else {
                $('.block > li > .row > .titleColumn > .title').each(function () {
                    var text = $(this).text().toLowerCase();
                    var listItems;
                    if (text.indexOf(valThis) >= 0) {
                        $(this).closest(".block").removeClass('textFiltered');
                    } else {
                        $(this).closest(".block").addClass('textFiltered');
                    }
                });
            };
            refreshView();
        });


        $("#myTags").tagit({
            onTagClicked: function (event, ui) {
                $("#myTags").tagit("removeTagByLabel", ui.tagLabel);
            },
            beforeTagRemoved: function (event, ui) {
                var field = ui.tag.attr('field');
                var id = ui.tag.attr('id');
                updateFilterHide(id, field);
                $(".filterMenuItem[id='" + id + "'][field='" + field + "']").closest('li').removeClass('filterCheck');
                refreshView();
            },
            afterTagRemoved: function (event, ui) {
                if ($("#myTags").tagit("assignedTags").length === 0) {
                    $.each(filterClassList, function(index, value){
                        $("." + value).removeClass(value);
                    });
                    hidden=false;
                    refreshView();
                }
            },
        });

        $(".filterMenuItem").on("click", function () {
            var field = $(this).attr('field')
            var name = $.trim($(this).attr('name'));
            var id = $(this).attr('id');
            var tags = $("#myTags").tagit("assignedTags");
            if ($.inArray(name, tags) === -1) {
                $(this).closest('li').addClass('filterCheck');
                $("#myTags").tagit("createTag", name);
                $('ul li:nth-last-child(2)').attr('id', id);
                $('ul li:nth-last-child(2)').attr('field', field);
                updateFilter(id, field);
            } else {
                $(this).parent().parent().removeClass('filterCheck');
                $(this).removeClass('filterCheck');
                $("#myTags").tagit("removeTagByLabel", name);
                //updateFilterHide(id, field);
            }
            refreshView();
        });

        var filterClassList = [];
        function updateFilter(id, field) {
            var filterClass = "filtered-" + field;
            if( $("." + filterClass).length == 0 ){
                $('.block').addClass(filterClass);
            }
            $('.' + field + "-" + id).removeClass(filterClass);
            if ($.inArray(filterClass, filterClassList) === -1) {
                filterClassList.push(filterClass);
            };
        }
        function updateFilterHide(id, field) {
            var filterClass = "filtered-" + field;
            $('.' + field + "-" + id).addClass(filterClass);
            if ($('.block').length == $('.' + filterClass).length) {
                $('.block').removeClass(filterClass);
            }
        }

        function refreshView() {
            $('.block').show();
            $.each(filterClassList, function(index, value){
                $("." + value).hide();
            });
            $('.textFiltered').hide();
        }

        var offset = 220;
        var duration = 500;
        jQuery(window).scroll(function() {
            if (jQuery(this).scrollTop() > offset) {
                jQuery('.backToTop').fadeIn(duration);
            } else {
                jQuery('.backToTop').fadeOut(duration);
            }
        });
    
        jQuery('.backToTop').click(function(event) {
            event.preventDefault();
            jQuery('html, body').animate({scrollTop: 0}, duration);
            return false;
        })

        $('#overlay').on('click',function(e){
        	$('#menuFilter').multilevelpushmenu('collapse')
        	$('#overlay').fadeOut("fast");
        });

    });



</script>

<style>


    .container {
        overflow: visible;
        height:100%;
    }
    .scroller {
        overflow-y:visible;
		height:100%;
    }

    #menuFilter {
        display:none;
    }
    .lt-ie9 #menuFilter {
        display:block;
    }

    .lt-ie9 .mp-menu {
        visibility:hidden;
    }
    .lt-ie9 .scroller {
        position:absolute;
        top:0px;
        left:0px;
        width:100%;
        /*margin-left:-300px;*/
    }
    .lt-ie9 .fa-rotate-90 {
        padding-right:10px;
        margin-top:10px;
        background:none;
        vertical-align:central;
    }

    .mp-menu ul li > a {
        padding:9px;
        font-size:1.5em;
        font-family:'Open Sans Condensed', sans-serif;
        color:#0094ff;
        line-height:1em;
    }
        .mp-menu ul li > a::after {
            font-size:1em;
            padding-right:9.6px;
            color:#0094ff;
            float:left;
            font-family: FontAwesome;
            content: "\f104";
            font-weight:normal;
            font-style:normal;
        }

    .mp-menu a{
        font-size: 1.5em;
        padding: 4px 0px 4px 15px;
        display: block;
    }

    h2 > .fa-times, a > .fa-filter {
        float:right;
    }

    .block {
        margin:5px;
        fill-opacity:0.99;
        position:relative;
        display:block;
    }

    .area {
        font-weight:300;
        color:rgb(128, 128, 128);
        display:block;
        margin-left:9px;
    }
    .coe {
        font-weight:800;
    }
    .title {
        
    }
    
    .blockContent {
        padding:5px;
        max-width:900px !important;
        display:block;
    }
        .blockContent:hover {
            background-color:#0081de;
            color:rgb(255, 255, 255) !important;
        }
    .titleColumn {
        text-align:right;
    }

    .backToTop {
        position: fixed;
        bottom: 0px;
        right: 0px;
        text-decoration: none;
        color: #000000;
        background-color: rgba(135, 135, 135, 0.50);
        font-size: 12px;
        padding: 1em;
        display: none;
    }

    .backToTop:hover {    
        background-color: rgba(135, 135, 135, 0.50);
    }

    .left-off-canvas-menu {
        height: 100%;
    }

    .list {
        margin:0px;
        font-size:0;
        
    }


    #myTags {
        width:100%;
    }

    .tagit-choice {
        background-color:#FFF0B3;
        padding:15px;
        width:100%;
    }
    .tagit-choice:first-child {
        margin-top:3px;
    }
    .tagit-label {
        color:black;
        font-weight:bold;
    }
    .text-icon {
        float:right;
        position:relative;
        top:-10px;
        font-size:xx-large;
        color:black;
    }

    .doubleList {
        -moz-column-count: 2;
        -moz-column-gap: 0px;
        -webkit-column-count: 2;
        -webkit-column-gap: 0px;
        column-count: 2;
        column-gap: 0px;
    }
    .tagList {
        -moz-column-count: 1;
        -moz-column-gap: 0px;
        -webkit-column-count: 1;
        -webkit-column-gap: 0px;
        column-count: 1;
        column-gap: 0px;
        list-style-type: none;
        padding:0; margin:0;
    }

    .search {
        float:left;
        background-image: url(http://www.levenmetwater.nl/static/global/images/icon-search.png);
        background-position: 10px center;
        background-repeat: no-repeat;
        margin: 0px !important;
        width: 100%;
        height: 40px;
        padding: 10px 45px 10px 10px !important;
        text-indent: 20px;
        -webkit-transition: all 0.2s;
        -moz-transition: all 2s;
        transition: all 0.2s;
        border:none;
    }
    .lt-ie9 .search {
        padding-left:30px !important;
    }
        .search:focus {
            background-position: -20px center;
            text-indent: 20px;
        }

        .search::-webkit-search-cancel-button{
            position:relative;
            right:25px;
  
            -webkit-appearance: none;
            height: 20px;
            width: 20px;
            border-radius:0px;
        }
            .search::-webkit-search-cancel-button::before {
                font-family: FontAwesome;
                font-size:large;
                content: "\f057";
                color:black;

            }

    .filterExpand {
        color:white;
        position:relative;
        top:-37px;
        padding: 5px 0 0px 15px;
        float: right;
        width: 50px;
        margin: 0px !important;
        font-size: small;
        height: 37px !important;
        overflow: hidden !important;
        vertical-align: middle;
        background-color: #0094ff;
    }


    #menuFilter .multilevelpushmenu_wrapper h2, #menuFilter3D h2 {
	    font-size: medium !important;
	    line-height: 1em;
	    font-weight: lighter;
        margin-top:0;
	    color: white;
        height:50px;
	    padding: 1em .4em .4em .4em;
        background-color: #0094ff;
        font-family: Optima, Segoe, "Segoe UI", Candara, Calibri, Arial, sans-serif;
    }

    #menuFilter .levelHolderClass, .mp-level {
        background-color:white !important;
        color:white;
    }

    /*#menuFilter li:hover {
        background-color:#54c5ff !important;
        border:0 !important;
    }*/


    #menuFilter li {
        border:0 !important;
        padding:0;
    }

    #menuFilter .multilevelpushmenu_wrapper a {
        color:#0094ff !important;
        border:0 !important;
        padding:9px;
    }

    .doubleList li:hover {
    }

    .backItemClass {
        background-color:white !important;
        color:#0094ff !important;
        border:0px !important;
    }
        .backItemClass a {
            font-size: medium !important;
        }
        /*.backItemClass:hover {
            background-color:#54c5ff !important;
        }*/

     .filterCheck::before {
        float:right;
        font-family: FontAwesome;
        /*font-size:large;*/
        content: "\f00c";
        color:white;
        padding-right:5px;
    }

    .filterCheck {
        background-color:#4cff00 !important;
        color:white !important; 
    }

    /*#menuFilter .filterCheck:hover {
        background-color:#a3ff7c !important;
    }*/

    .ui-autocomplete-input {
        visibility:hidden !important;
    }

    .inner-wrap {
        position:absolute;
        top:37px;
		width:inherit !important;
		height:100%;
    }

	.list {
		width:100%;
	}


	#panel-side {
		width:0px;
		float:right !important;
	}

	#panel-indicatorlist {
		float:left !important;
		width:100% ;
		margin:0;
		padding:0;
	}

	#overlay {
		background-color:grey;
		  /* IE 8 */
		  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";

		  /* IE 5-7 */
		  filter: alpha(opacity=80);

		  /* Netscape */
		  -moz-opacity: 0.8;

		  /* Safari 1.x */
		  -khtml-opacity: 0.8;

		  /* Good browsers */
		  opacity: 0.8;
	}


	#chartTest {
		height: 400px;
		position: fixed;
		top: 25%;
		left:50%;
	}

	#panel-side {
		overflow:hidden;
	}

	#panel-indicatorlist {
		background-color:rgb(243, 243, 243);
	}

	#pushobjLazy {
		background-color: #2D3947;
	}



	.scroller, .scroller-inner {
		height:100%;
	}
	#pushList {
		height:100%;
    }

	 .active-indicator {
		background-color:#ff6500 !important;
	}



</style>

