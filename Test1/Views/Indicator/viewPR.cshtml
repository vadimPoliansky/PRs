@using IndInv.Helpers
@model IndInv.Models.ViewModels.PRViewModel
@using IndInv.Models
@using System.Globalization

@{
    ViewBag.Title = "Performance Reports";
    ViewBag.Buttons = "";
    foreach (var analyst in Model.allAnalysts)
    {
        ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + analyst.Analyst_ID + " parameter=analystID >" + analyst.First_Name + "</div>";
    }
    ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + 0 + " parameter=analystID >" + "All" + "</div>";
    ViewBag.fiscalYear = Model.Fiscal_Year;
}
<div class="filter-bar">
    <div class="filter filter-coe" field="coe"><i class="fa fa-filter"></i>CoE</div>
    <div class="filter filter-analyst" field="analyst"><i class="fa fa-filter"></i>Analyst</div>
</div>

<br />
<br />

<div class="block">
@{var properties = ModelMetadataProviders.Current; ;
  var fiscalYear = Model.Fiscal_Year;}
@foreach (var coe in Model.allCoEs.OrderBy(x=>x.CoE))
{
    if (@Model.Analyst_ID.HasValue ? coe.Indicator_CoE_Map.Any(x=>x.Indicator.Analyst_ID == @Model.Analyst_ID) : true) {
    var footnotes = new List<Footnotes>();
    <div class="row" style="min-width:98%">
    <fieldset class="prBlock">
    <div class="large-11 columns">
        <h3>@Html.DisplayFor(modelItem => coe.CoE)</h3>
    </div>
    <div class="large-1 columns">
        <div coeID='@coe.CoE_ID' fiscalYear="@fiscalYear" id='btn' class='btnExcel'>View Excel</div>
    </div>
    <table id="tbl_@coe.CoE_Abbr" class="PR" border="1" style="border-collapse:collapse; table-layout:fixed" runat="server" >
    <tr class="prheader-1">
        <td rowspan="2", class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Number) </td>
        <td rowspan="2", class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.Indicator) </td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_3", fiscalYear)).DisplayName</td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_2", fiscalYear)).DisplayName</td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_1", fiscalYear)).DisplayName</td>
        <td rowspan="1", colspan ="5", class="prheader prheader-1">@FiscalYear.FYStrFull("FY_Header", fiscalYear)</td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Target").DisplayName</td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Performance_Threshold").DisplayName</td>
        <td rowspan="2", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Comparator").DisplayName</td>
    </tr>

    <tr class="prheader-2 prheader-Final">
        <td rowspan="1", class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q1)</td>
        <td rowspan="1", class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q2)</td>
        <td rowspan="1", class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q3)</td>
        <td rowspan="1", class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_Q4)</td>
        <td rowspan="1", class="prheader prheader-2">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.FY_13_14_YTD)</td>
    </tr>
    @{var numCount = 1;}
    @foreach (var area_map in coe.Area_CoE_Map.Where(x => Model.allMaps.Where(y => y.Indicator.Area == x.Area).Where(y => y.CoE == coe).Any(y => @Model.Analyst_ID.HasValue ? y.Indicator.Analyst_ID == @Model.Analyst_ID : true)).Where(x => x.Fiscal_Year == fiscalYear).OrderBy(x => x.Area.Sort))
    {
        <tr class='prrow' areaID="@area_map.Area_ID" coeID="@coe.CoE_ID">
            <td class="prarea" colspan="100%" mapID="@area_map.Map_ID" area="@Html.DisplayTextFor(modelItem => area_map.Area.Area)">
                <b>@Html.DisplayFor(modelItem => area_map.Area.Area)</b> <br />    
                @Html.DisplayFor(modelItem => area_map.Objective)
            </td>
        </tr>
        string[,] oldColumns = null;
        foreach (var map in Model.allMaps.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator.Area.Equals(area_map.Area)).Where(d => d.CoE.CoE.Contains(coe.CoE)).OrderBy(f => f.Number))
        {
            var indicatorTitle = ""; int? number = numCount; var skip = false;
            if (map.Indicator.Indicator != null && map.Indicator.Indicator.Contains("%SKIP%") == false)
            {
                indicatorTitle = Html.DisplayFor(modelItem => map.Indicator.Indicator).ToString();
                number = numCount;
            }
            else
            {
                numCount--;
                number = null;
                skip = true;
            }
            <tr class='prrow'areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID">
                <td class="prtd-id" mapID="@map.Map_ID" >                
                    <a class="row-up"><i class="fa fa-sort-desc"></i></a>
                    @number
                    <a class="row-down"><i class="fa fa-sort-asc"></i></a>
                </td>
            @{numCount++;}
            <td indicatorID="@map.Indicator_ID" field="Indicator" class="prtd-title">@indicatorTitle
            @{int j = 0;}
            @foreach (var footnote in map.Indicator.Indicator_Footnote_Map.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator_ID == map.Indicator_ID).OrderBy(e => e.Indicator_ID))
            {   
                if (j != 0)
                { Html.Raw(','); }
                <sup>@Html.DisplayTextFor(modelItem => footnote.Footnote.Footnote_Symbol)</sup>
                j++;
                if (!footnotes.Contains(footnote.Footnote)){
                    footnotes.Add(footnote.Footnote);}
            }
            @{  var indicator = map.Indicator;
                var indicatorType = indicator.GetType();
                //var format = indicator.Format.Format_Code;
                string[,] columns = new string[,]{
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_3",fiscalYear)).GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_3",fiscalYear) + "_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_3",fiscalYear)},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_2",fiscalYear)).GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_2",fiscalYear) + "_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_2",fiscalYear)},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_1",fiscalYear)).GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_1",fiscalYear) + "_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_1",fiscalYear)},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1_Sup").GetValue(indicator,null), 
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1_Color").GetValue(indicator,null) + " Q1_Color", FiscalYear.FYStrFull("FY_",fiscalYear) + "Q1"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2_Sup").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2_Color").GetValue(indicator,null) + " Q2_Color", FiscalYear.FYStrFull("FY_",fiscalYear) + "Q2"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3_Sup").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3_Color").GetValue(indicator,null) + " Q3_Color", FiscalYear.FYStrFull("FY_",fiscalYear) + "Q3"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4_Sup").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4_Color").GetValue(indicator,null) + " Q4_Color", FiscalYear.FYStrFull("FY_",fiscalYear) + "Q4"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD_Sup").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD_Color").GetValue(indicator,null) + " YTD_Color", FiscalYear.FYStrFull("FY_",fiscalYear) + "YTD"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_",fiscalYear) + "Target"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_",fiscalYear) + "Performance_Threshold"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator").GetValue(indicator,null),
                     (string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Sup").GetValue(indicator,null), "prtd", FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator"},
                };
                ViewBag.PRCols = columns;
                if (!skip)
                {
                    oldColumns = columns;
                }
            }
            </td>
            @for (int i = 0; i <= columns.GetUpperBound(0); i++)
            {
                int colSpan = 1;
                if (i != columns.GetUpperBound(0) && columns[i + 1, 0] == "=")
                {
                    int k = 1;
                    while (columns[i + k, 0] == "=")
                    {
                        colSpan++;
                        k++;
                    }
                }
                else { colSpan = 1; };
                if (columns[i, 0] != "=")
                {
                    var tdClass = columns[i, 2];
                    if (skip) { tdClass = oldColumns[i, 2]; };
                    <td align="center", indicatorID="@map.Indicator_ID", field="@Html.Raw(columns[i, 3])", colspan="@colSpan", class="@Html.Raw(tdClass)">@Html.Raw(columns[i, 0]) <sup>@Html.Raw(columns[i, 1])</sup></td>
                }
            }
            </tr>
        }
    }
    </table>
    @foreach(var footnote in footnotes){
        <small>@footnote.Footnote_Symbol, @footnote.Footnote</small><br />
    }
    <br />

    <table id="tbl" class="PRDef" border="1" style="border-collapse:collapse; table-layout:fixed" runat="server" >
    <tr class="prheader-1">
    <td rowspan="1", class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Number) </td>
    <td rowspan="1", class="prheader prheader-1">@Html.DisplayNameFor(modelItem => Model.allMaps.First().Indicator.Indicator) </td>
    <td rowspan="1", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Definition_Calculation").DisplayName</td>
    <td rowspan="1", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Target_Rationale").DisplayName</td>
    <td rowspan="1", class="prheader prheader-1">@properties.GetMetadataForProperty(null, typeof(Indicators), FiscalYear.FYStrFull("FY_", fiscalYear) + "Comparator_Source").DisplayName</td>
    </tr>

    @{numCount = 1;}
    @foreach (var area_map in coe.Area_CoE_Map.Where(x => Model.allMaps.Where(y => y.Indicator.Area == x.Area).Where(y => y.CoE == coe).Any(y => @Model.Analyst_ID.HasValue ? y.Indicator.Analyst_ID == @Model.Analyst_ID : true)).Where(x => x.Fiscal_Year == fiscalYear).OrderBy(x => x.Area.Sort))
    {
        <tr class="prrow" areaID="@area_map.Area_ID" coeID="@coe.CoE_ID">
        <td class="prarea" colspan="100%" mapID="@area_map.Map_ID" area="@Html.DisplayTextFor(modelItem => area_map.Area.Area)">
            <b>@Html.DisplayFor(modelItem => area_map.Area.Area)</b> <br />    
            @Html.DisplayFor(modelItem => area_map.Objective)
        </td>
        </tr>
        string[,] oldColumns = null;
        foreach (var map in Model.allMaps.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator.Area.Equals(area_map.Area)).Where(d => d.CoE.CoE.Contains(coe.CoE)).OrderBy(f => f.Number))
        {
            var indicatorTitle = ""; int? number = numCount; var skip = false;
            if (map.Indicator.Indicator != null && map.Indicator.Indicator.Contains("%SKIP%") == false)
            {
                indicatorTitle = Html.DisplayFor(modelItem => map.Indicator.Indicator).ToString();
                number = numCount;
            }
            else
            {
                numCount--;
                number = null;
                skip = true;
            }
            <tr class='prrow' areaID="@area_map.Area_ID" coeID="@coe.CoE_ID" mapID="@map.Map_ID" style="background-color:White">
            <td class="prtd-id-def" style="min-width:1%;" >@number</td>
            @{numCount++;}
            <td indicatorID="@map.Indicator_ID" field="Indicator" class="prtd-titleDef">@indicatorTitle
            <sup>
            @{int j = 0;}
            @foreach (var footnote in map.Indicator.Indicator_Footnote_Map.Where(x => x.Fiscal_Year == fiscalYear).Where(e => e.Indicator_ID == map.Indicator_ID).OrderBy(e => e.Indicator_ID))
            {
                if (j != 0)
                { Html.Raw(","); }
                Html.DisplayFor(modelItem => footnote.Footnote.Footnote_Symbol);
                j++;
            }
            </sup>
            @{  var indicator = map.Indicator;
                var indicatorType = indicator.GetType();
                string[,] columns = new string[,]{
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Definition_Calculation").GetValue(indicator,null),
                     "", "prtdDef", FiscalYear.FYStrFull("FY_",fiscalYear) + "Definition_Calculation"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Rationale").GetValue(indicator,null),
                     "", "prtdDef", FiscalYear.FYStrFull("FY_",fiscalYear) + "Target_Rationale"},
                    {(string)indicatorType.GetProperty(FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Source").GetValue(indicator,null),
                     "", "prtdDef", FiscalYear.FYStrFull("FY_",fiscalYear) + "Comparator_Source"},
                };
                if (!skip)
                {
                    oldColumns = columns;
                }
                ViewBag.PRColsDefs = columns;
            }
            </td>
            @for (int i = 0; i <= columns.GetUpperBound(0); i++)
            {
                int colSpan = 1;
                if (i != columns.GetUpperBound(0) && columns[i + 1, 0] == "=")
                {
                    int k = 1;
                    while (columns[i + k, 0] == "=")
                    {
                        colSpan++;
                        k++;
                    }
                }
                else { colSpan = 1; };
                if (columns[i, 0] != "=")
                {
                    var tdClass = columns[i, 2];
                    if (skip) { tdClass = oldColumns[i, 2]; };
                    <td align="center", indicatorID="@map.Indicator_ID", field="@Html.Raw(columns[i, 3])", colspan="@colSpan", class=@Html.Raw(tdClass)>@Html.Raw(columns[i, 0]) <sup>@Html.Raw(columns[i, 1])</sup></td>
                }
            }
            </tr>
        }
    }
    </table>
    </fieldset>
    </div>
    }
}
</div>

<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="~/Scripts/jquery.simplemodal.1.4.4.min.js"></script>
<script type="text/javascript">
    var currentMousePos = { x: -1, y: -1 };
    $(document).mousemove(function(event) {
        currentMousePos.x = event.pageX;
        currentMousePos.y = event.pageY + $('#pushobjLazy').scrollTop();
    });

    $(document).ready(function () {
        function formatIndicator(obj, formatID){
            var indicatorID = obj.attr('indicatorID');
            $.post('formatIndicator', {indicatorID: indicatorID, formatID: formatID}, function(data){
            });
        }

        function changeColor(obj, colorID){
            var indicatorID = obj.attr('indicatorID');
            var clickedObjs = obj.closest("tr").children();
            $.post('changeColor',{indicatorID: indicatorID, colorID: colorID, fiscalYear:@fiscalYear }, function(data){
                $.each(clickedObjs, function(index,obj){
                    var classes = obj.className.split(" ").filter(function(c) {
                        return c.lastIndexOf("css", 0) !== 0;
                    });
                    obj.className = $.trim(classes.join(" "));
                    $.each(classes, function(index, c){
                        if (c.indexOf("Color") !== -1){
                            $(obj).addClass(data[c]);
                        }
                    });
                });
            });
        }

        function setCustomColor(obj, color){
            var indicatorID = obj.attr('indicatorID');
            var field = obj.attr('field');
            $.post('setCustomColor', {indicatorID: indicatorID, field: field, color: color, fiscalYear: @fiscalYear }, function(data){
                var classes = $(obj).attr('class').split(" ").filter(function(c) {
                    return c.lastIndexOf("css", 0) !== 0;
                });
                obj.attr('class', $.trim(classes.join(" ")));
                $(obj).addClass(color);
                changeColor(obj, 3);
            });
        }

        @if(ViewBag.PRCols != null){
        <text>
        function addNewIndicator(obj, newIndicatorID){
            exist = (newIndicatorID !== null);
            var coeID = obj.closest( "tr" ).attr("coeID");
            var areaID = obj.closest( "tr" ).attr("areaID");
            var indicatorID = obj.attr("indicatorID") || obj.closest("tr").attr("indicatorID");
            var clickedRow = obj.closest( "tr" );
            var definitions = obj.closest( "table" ).hasClass("PRDef");
            $.post('newIndicatorAtPR', { fiscalYear: @ViewBag.fiscalYear, areaID: areaID, coeID: coeID, indicatorID: indicatorID, newIndicatorID: newIndicatorID}, function(returnedData){
                @{var html = "";
                html += "<td></td>";
                html += "<td class='newrow-td'><input class='newrow-text' field='Indicator' type='text'></td>";
                for(var i=0; i < ViewBag.PRCols.GetLength(0); ++i){
                    html += "<td class='newrow-td'><input class='newrow-text' field='" + ViewBag.PRCols[i, 3] + "' type='text'>";
                    html += "<input class='newrow-text' field='" + ViewBag.PRCols[i, 3] + "_Sup" + "' type='text'></td>";
                }}
                @{var htmlDef = "";
                htmlDef += "<td></td>";
                htmlDef += "<td class='newrow-td'><input class='newrow-text' field='Indicator' type='text'></td>";
                for(var i=0; i < ViewBag.PRColsDefs.GetLength(0); ++i){
                    htmlDef += "<td class='newrow-td'><input class='newrow-text' field='" + ViewBag.PRColsDefs[i, 3] + "' type='text'>";
                }}
                @{var htmlExist = "";
                htmlExist += "<td class='prtd-id'><a class='row-up'><i class='fa fa-sort-desc'></i></a>#<a class='row-down'><i class='fa fa-sort-asc'></i></a></td>";
                htmlExist += "<td class='newrow-td prtd-title' field='Indicator'></td>";
                for(var i=0; i < ViewBag.PRCols.GetLength(0); ++i){
                    htmlExist += "<td class='newrow-td prtd " + ViewBag.PRCols[i,2] + "' field='" + ViewBag.PRCols[i, 3] + "'></td>";
                }}
                htmlColumns = "@Html.Raw(html)";
                htmlColumnsDef = "@Html.Raw(htmlDef)";
                htmlExistColumns = "@Html.Raw(htmlExist)";
                if (!exist){
                    clickedRow.after("<tr class='newrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "'>" + (!definitions ? htmlColumns : htmlColumnsDef));
                    $(".newrow-text").on('change keyup paste',function(e){
                        var indicatorID = $(this).closest( "tr" ).attr("indicatorID");
                        var field = $(this).attr("field");
                        var parameters = {
                            indicatorID: indicatorID,
                            updateProperty: field,
                            updateValue: $( this ).val(),
                            updateValueSup: "%NULL%",
                            fiscalYear: @Model.Fiscal_Year,
                        };
                        $.ajax({
                            url: 'setValue',
                            type: 'POST',
                            data: JSON.stringify(parameters),
                            contentType: 'application/json; charset=utf-8',
                            success: function (result) {
                            },
                            error: function (request){
                            }
                        }); 
                    });
                } else {
                    $('.justClicked').attr('mapid',returnedData.mapID);
                    $('.justClicked').addClass('clicked');
                    $('.justClicked').removeClass('justClicked');
                    if (returnedData.newAreaID == areaID){
                        var newMap = $('.new-map');
                        newMap.after("<tr class='newrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "'>" + htmlExistColumns);
                    } else if (returnedData.newAreaID != 0) {
                        correctAreaRow = $('[coeid="' + coeID + '"][areaid="' + returnedData.newAreaID + '"]').first();
                        correctAreaRow.after("<tr class='newrow' indicatorID='" + returnedData.indicatorID + "' areaID='" + returnedData.newAreaID + "' mapID = '" + returnedData.mapID + "' coeID = '" + coeID + "'>" + htmlExistColumns);
                    }
                    $.each($('.newrow-td'),function(index, obj){
                        var indicatorID = $(obj).closest( "tr" ).attr("indicatorID");
                        $(obj).attr('indicatorID', indicatorID);
                        var field = $(obj).attr("field");
                        $.get('getValue', { indicatorID: indicatorID, field:field, fiscalYear: '@fiscalYear' }, function(data){
                            $(obj).html(data.Value + "<sup>" + data.Value_Sup + "</sup>");
                            $(obj).addClass(data.Color);
                            $(obj).removeClass("newrow-td");
                        });
                    });
                }
            });
        }
        </text>
        }



        $(document).on('dblclick','.prtd, .prtd-title, .cssGreen, .cssRed, .cssWhite, .cssYellow', function (e) {
            var indicatorID = e.target.attributes.getNamedItem('indicatorID');
            var field = e.target.attributes.getNamedItem('field');
            var currentEle = $(this);
            e.stopPropagation();

            $.get('getValue', { indicatorID: indicatorID.value, field: field.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
                var value = data.Value || "";
                var value2 = data.Value_Sup || "";
                updateVal(currentEle, value, value2, indicatorID, field);
            });

        });

        $(".prtdDef").dblclick(function (e) {
            var indicatorID = e.target.attributes.getNamedItem('indicatorID');
            var field = e.target.attributes.getNamedItem('field');
            var currentEle = $(this);
            e.stopPropagation();

            $.get('getValue', { indicatorID: indicatorID.value, field: field.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
                var value = data.Value || "";
                updateDefVal(currentEle, value, indicatorID, field);
            });

        });

        $(".prtd-id").dblclick(function (e) {
            var mapID = e.target.attributes.getNamedItem('mapID');
            var currentEle = $(this);
            e.stopPropagation();

            $.get('getIndicatorNumber', { mapID: mapID.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
                var value = data.Value || "";
                updateNumVal(currentEle, value, mapID);
            });
        });

        $(".prarea").dblclick(function (e) {
            var mapID = e.target.attributes.getNamedItem('mapID');
            var currentEle = $(this);
            e.stopPropagation();
            
            $.get('getAreaMap', { mapID: mapID.value, fiscalYear: @Model.Fiscal_Year}, function (data) {
                updateObjVal(currentEle, mapID, data);
            });
        });

        function updateVal(currentEle, value, value2, indicatorID, field) {
            @*$(currentEle).html('<input id="newEdit" indicatorID ="' + indicatorID.value + 
                                    '" field="' + field.value +
                                    '" class="thVal" type="text" value="' + value + 
                                    '" />' +
                               '<input id="newEdit2" indicatorID ="' + indicatorID.value + 
                                    '" field="' + field.value +
                                    '" class="thVal2" type="text" value="' + value2 + '" />' +
                               '<a class="thButton" id="editFootnotes">Edit Footnotes for this indicator</button>'
                                );*@
            $(currentEle).html('<textarea id="newEdit" indicatorID ="' + indicatorID.value + 
                                    '" field="' + field.value +
                                    '" value="' + value + 
                                    '" class="thVal pr-edit-textarea" rows="1">' + value +
                                    '</textarea>' +
                                '<textarea id="newEdit" indicatorID ="' + indicatorID.value + 
                                    '" field="' + field.value +
                                    '" value="' + value2 + 
                                    '" class="thVal2 pr-edit-textarea" rows="1">' + value2 +
                                    '</textarea>' +
                                @*'<a class="thButton" id="editFootnotes"><h5>Edit Footnotes for this indicator</h5></button>'*@
                                '<textarea id="newEdit" indicatorID ="' + indicatorID.value + 
                                    '" value="' + value2 + 
                                    '" class="thFootnotes pr-edit-textarea" rows="1">' + value2 +
                                    '</textarea>'
                                );
            if (field.value === "Indicator"){
                $('.thVal2').hide();
                $('.thFootnotes').show();
                $('.thButton').show();
            } else {
                $('.thVal2').show();
                $('.thFootnotes').hide();
                $('.thButton').hide();
            }
            $(".thVal").focus();
            $(".thVal").keyup(function (event) {
                if (event.keyCode == 13) {
                    //$(currentEle).html($(".thVal").val().trim());
                }
            });

            @*$(".thButton").click(function(e){
                var params = [
                    'height='+screen.height,
                    'width='+screen.width,
                    'fullscreen=yes' // only works in IE, but here for completeness
                ].join(',');
                window.open('editFootnoteMaps?fiscalYear=' + @Model.Fiscal_Year + '&indicatorID=' + indicatorID.value,'popup_window',params);
            });*@

            $('body').unbind("click").click(function (evt) {
                if (evt.target.id == "newEdit" || evt.target.id == "newEdit2" || evt.target.id == "editFootnotes") return;
                var colorElement = $(currentEle);
                var prop = $('.thVal').attr('field');
                //var indicatorID = document.getElementById('newEdit').getAttribute('indica
                var parameters = {
                    indicatorID: $('.thVal').attr('indicatorID'),
                    updateProperty: prop,
                    updateValue: $.trim($('.thVal').val()),
                    updateValueSup: prop !== 'Indicator' ? $.trim($('.thVal2').val()) : $.trim($('.thFootnotes').val()),
                    fiscalYear: @Model.Fiscal_Year,
                };
                $.ajax({
                    url: 'setValue',
                    type: 'POST',
                    data: JSON.stringify(parameters),
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                        /*if (result != ""){
                            //colorElement.attr("class",result);
                            var classes = $(colorElement).attr('class').split(" ").filter(function(c) {
                                return c.lastIndexOf("css", 0) !== 0;
                            });
                            colorElement.attr('class', $.trim(classes.join(" ")));
                            $(colorElement).addClass(result);
                        }*/
                        changeColor(colorElement, -1)
                    },
                    error: function (request){
                    }
                });
                if (prop !== 'Indicator'){
                    $(currentEle).html($.trim($(".thVal").val()) + "<sup>" + $.trim($(".thVal2").val()) + "</sup>");
                } else if (prop === 'Indicator') {
                    $(currentEle).html($.trim($(".thVal").val()) + "<sup>" + $.trim($(".thFootnotes").val()) + "</sup>");
                }
                currentEle = null;
            });
        }

        function updateObjVal(currentEle, mapID, value) {
            $(currentEle).html('<textarea id="newEdit" mapID ="' + mapID.value + 
                                    '" value="' + value + 
                                    '" class="thVal pr-edit-textarea" rows="4">' + value +
                                    '</textarea>'
                                );
            $(".thVal").focus();
            $(".thVal").keyup(function (event) {
                if (event.keyCode == 13) {
                    //$(currentEle).html($(".thVal").val().trim());
                }
            });

            $('body').unbind("click").click(function (evt) {
                if (evt.target.id == "newEdit") return;
                var area = $(currentEle);
                //var indicatorID = document.getElementById('newEdit').getAttribute('indica
                var parameters = {
                    mapID: mapID.value,
                    objective:$.trim($(".thVal").val()),
                    fiscalYear: @Model.Fiscal_Year,
                };
                $.ajax({
                    url: 'setAreaMap',
                    type: 'POST',
                    data: JSON.stringify(parameters),
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                    },
                    error: function (request){
                    }
                });
                $(currentEle).html("<b>" + area.attr("area") + " </b><br/>" +$.trim($(".thVal").val()));
                currentEle = null;
            });
        };

        function updateDefVal(currentEle, value, indicatorID, field) {
            $(currentEle).html('<textarea id="newEdit" indicatorID ="' + indicatorID.value + 
                                    '" field="' + field.value +
                                    '" value="' + value + 
                                    '" class="thVal pr-edit-textarea" rows="1">' + value +
                                    '</textarea>'
                              );
            $(".thVal").focus();
            $(".thVal").keyup(function (event) {
                if (event.keyCode == 13) {
                    //$(currentEle).html($(".thVal").val().trim());
                }
            });

            $('body').unbind("click").click(function (evt) {
                if (evt.target.id == "newEdit") return;
                var colorElement = $(currentEle);
                //var indicatorID = document.getElementById('newEdit').getAttribute('indica
                var parameters = {
                    indicatorID: $('.thVal').attr('indicatorID'),
                    updateProperty: $('.thVal').attr('field'),
                    updateValue: $.trim($('.thVal').val()),
                    updateValueSup: "%NULL%",
                    fiscalYear: @Model.Fiscal_Year,
                };
                $.ajax({
                    url: 'setValue',
                    type: 'POST',
                    data: JSON.stringify(parameters),
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                    },
                    error: function (request){
                    }
                });
                $(currentEle).html($.trim($(".thVal").val()));
                currentEle = null;
            });
        };


        $('#the-node').contextMenu({
            selector: 'td', 
            callback: function(key, options) {
            },

            items: {
                "insB": {name: "Insert New Blank Indicator Below",
                    callback: function(key, options){
                        addNewIndicator($(this), null);
                    }
                },

                insBExs: {name: "Insert Existing Indicator Below",
                    callback: function(key, options){
                        var clickedObj = $(this);
                        var clickedRow = $(this).closest( "tr" );
                        clickedRow.after("<tr class='new-map'><td colspan=99>'ADD'</td></tr>");
                        var coeID = clickedRow.attr("coeID");
                        var newDiv = "<div class='add-indicator-panel'>"
                        newDiv += "<div class='add-indicator-panel-header'>Add Existing Indicator:<i class='add-indicator-panel-close fa fa-times'></i></div>"
                        newDiv += "<input class='search' id='search_input' name='Search' type='search' placeholder='Search' />"
                        $.get('getIndicatorList', function (data) {
                            newDiv += "<div class='add-indicator-list'><ul>"
                            var indicatorList = $("[coeid='" + coeID + "'] > .prtd-title").map(function(){return Number($(this).attr("indicatorid"));}).get();
                            $.each(data, function(index,value){
                                newDiv += "<li class='add-indicator-item"
                                if ( jQuery.inArray(value.Indicator_ID, indicatorList) != -1 ) {
                                    newDiv += " included"
                                }
                                newDiv += "' indicatorID=" + value.Indicator_ID + "><div class='add-indicator-item-title'>" + value.Indicator_ID + " " + value.Area + ": </div>" + value.Indicator + "</li>";
                            });
                            newDiv += "</ul></div>"
                            newDiv += "</div>"
                            //clickedRow.after(newDiv);
                            $('.block').after(newDiv);
                            $('.add-indicator-panel').hide();
                            $('.add-indicator-panel').slideDown('slow');
                            $('.add-indicator-panel').css({
                                left:  currentMousePos.x,
                                top:   currentMousePos.y
                            });
                            $('.add-indicator-panel-header').drags();
                            //$(newDiv).hide().insertAfter(clickedRow).slideDown('slow');
                            //$(newDiv).hide()
                            //$(clickedRow).after(newDiv);
                            //$(newDiv).fadeIn("slow");

                            $('#search_input').on('keyup change search click', function () {
                                var valThis = $(this).val().toLowerCase();
                                if (valThis == "") {
                                    $('.add-indicator-item').removeClass('textFiltered');
                                } else {
                                    $('.add-indicator-item').each(function () {
                                        var text = $(this).text().toLowerCase();
                                        var listItems;
                                        if (text.indexOf(valThis) >= 0) {
                                            $(this).removeClass('textFiltered');
                                        } else {
                                            $(this).addClass('textFiltered');
                                        }
                                    });
                                };
                                $('.add-indicator-item').show();
                                $('.textFiltered').hide();
                            });

                            $('.add-indicator-panel-close').on('click', function(){
                                $(this).closest('.add-indicator-panel').undrags();
                                $(this).closest('.add-indicator-panel').slideUp('slow',function() { $(this).remove()});
                                $('.new-map').remove()
                            });

                            $('.add-indicator-item').on('click', function(){
                                var indicatorID = $(this).attr('indicatorID')
                                if (!$(this).hasClass('included')){
                                    if (!$(this).hasClass('clicked')){
                                        $(this).addClass('justClicked');
                                        addNewIndicator(clickedObj, indicatorID);
                                    } else {
                                        $(this).removeClass('clicked');
                                        var mapID = $(this).attr('mapID')
                                        $.post('deleteCoEMaps', { mapID : mapID});
                                        $('.newrow[indicatorid="' + indicatorID + '"]').remove();
                                    }
                                }
                            });
                        });
                    }
                },

                "foldDelete": {
                    "name": "Remove Indicator From This PR",
                    "items": {
                        "foldDelete": {"name": "Remove From This PR",
                            callback: function(key, options){
                                var mapID = $(this).closest( "tr" ).attr("mapID");
                                //$(this).closest( "tr" ).remove();
                                $('tr[mapID="' + mapID + '"]').remove();
                                $.post('deleteCoEMaps', { mapID : mapID});
                            },
                        }
                    }
                },

                separator1: "-----",

                "colorSettings": {
                    "name": "Color Type",
                    "items": {
                        @foreach(var color in Model.allColors){
                        <text>
                        "Color_@color.Color_ID" : { "name": "Change to @color.Color_Type",
                                className: 'color-choice',
                                callback:function(key, options){
                                    var obj = $(this);
                                    var colorID= @color.Color_ID;
                                    changeColor(obj, colorID);
                                },
                            },
                        </text>
                        }
                    },
                },

                separator2: "-----",

                "setGreen": {name: "Color Cell Green",
                    callback: function(key, options){
                        var color = "cssGreen";
                        var obj = $(this)
                        setCustomColor(obj, color);
                    }
                },
                "setYellow": {name: "Color Cell Yellow",
                    callback: function(key, options){
                        var color = "cssYellow";
                        var obj = $(this)
                        setCustomColor(obj, color);
                    }
                },
                "setRed": {name: "Color Cell Red",
                    callback: function(key, options){
                        var color = "cssRed";
                        var obj = $(this)
                        setCustomColor(obj, color);
                    }
                },

/*                separator2: "-----",

                "formatTest": {name: "FormatTest",
                    callback: function(key,options){
                        var formatID = 2;
                        var obj = $(this);
                        formatIndicator(obj, formatID);
                    }
                },*/

            }
        });

        $(document).on('click', '.row-up,.row-down', function(){
            var row = $(this).parents("tr:first");
            var mapID = row.attr("mapID");
            if ($(this).is(".row-up")) {
                if (row.prev().attr("mapID")){
                    row.insertBefore(row.prev());
                    $.post("moveCoEMapUp",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear});
                }else if (!row.prev().prev().hasClass("prheader-Final")){
                    row.insertBefore(row.prev());
                    $.post("moveCoEMapUp",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear, areaChange: -1});
                }
            } else {
                if (row.next().attr("mapID")){
                    row.insertAfter(row.next());
                    $.post("moveCoEMapDown",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear});
                }else if (row.next().length !== 0){
                    row.insertAfter(row.next());
                    $.post("moveCoEMapDown",{mapID: mapID, fiscalYear: @ViewBag.fiscalYear, areaChange: 1});
                }
            }
        });

        $.fn.drags = function(opt) {
            opt = $.extend({handle:"",cursor:"move"}, opt);

            if(opt.handle === "") {
                var $el = this;
            } else {
                var $el = this.find(opt.handle);
            }

            return $el.css('cursor', opt.cursor).on("mousedown", function(e) {
                if(opt.handle === "") {
                    var $drag = $(this).parent().addClass('draggable');
                } else {
                    var $drag = $(this).addClass('active-handle').parent().addClass('draggable');
                }
                var z_idx = $drag.css('z-index'),
                    drg_h = $drag.outerHeight(),
                    drg_w = $drag.outerWidth(),
                    pos_y = $drag.offset().top + drg_h - e.pageY,
                    pos_x = $drag.offset().left + drg_w - e.pageX;
                $drag.css('z-index', 1000).parents().on("mousemove", function(e) {
                    $('.draggable').offset({
                        top:e.pageY + pos_y - drg_h,
                        left:e.pageX + pos_x - drg_w
                    }).on("mouseup", function() {
                        $(this).removeClass('draggable').css('z-index', z_idx);
                    });
                });
                e.preventDefault(); // disable selection
            }).on("mouseup", function() {
                if(opt.handle === "") {
                    $(this).removeClass('draggable');
                } else {
                    $(this).removeClass('active-handle').parent().removeClass('draggable');
                }
            });
        };

        $.fn.undrags = function(opt) {
            $(this).removeClass('draggable');
        };

        $(document).on('click', '.filter', function(e){
            var field = e.target.textContent;
            if (field === "") {
                field = e.target.nextSibling.textContent;
            }
            var htmlContent ="<div class='simplemodal-close' id='filter'>";
            htmlContent += '<label><i class="fa fa-filter"></i><strong> Filter:</strong><label>';
            var ajaxUrl = 'get' + field + 's';
            $.get(ajaxUrl, function(data){
                jQuery.each(data, function (i, value) {
                    htmlContent += "<div class='filter-button' filterID ='" + value + "' field='" + field + "'>" + value + "</div>"
                    //htmlContent += "<div class='filterItem'>" + value + "</div>"
                });
                htmlContent += "<div class='filter-button' filterID ='' field='" + field + "'><em>Clear</em></div>"
                htmlContent += "</div>";
                var posX = e.pageX , posY = e.pageY;
                $(htmlContent).modal({
                    position: [posY,posX],
                    overlayClose:true,
                    opacity:80,
                    overlayCss: {backgroundColor:"#fff"},
                });
            });
        });

        $(".filter-button").on("click", function () {
            var field = $(this).attr('field')
            var name = $.trim($(this).attr('name'));
            var id = $(this).attr('id');
            var tags = $("#myTags").tagit("assignedTags");
            if ($.inArray(name, tags) === -1) {
                $(this).closest('li').addClass('filterCheck');
                $("#myTags").tagit("createTag", name);
                $('ul li:nth-last-child(2)').attr('id', id);
                $('ul li:nth-last-child(2)').attr('field', field);
                updateFilter(id, field);
            } else {
                $(this).parent().parent().removeClass('filterCheck');
                $(this).removeClass('filterCheck');
                $("#myTags").tagit("removeTagByLabel", name);
                //updateFilterHide(id, field);
            }
            refreshView();
        });


    });


</script>


<style>

    .filter-bar {
        background-color:#0061a7;
        border-bottom:1px solid rgb(89, 108, 139);
        border-top:1px solid black;
    }

    .filter {
        color:white;
        display:inline;
        font-size:medium;
    }

    .add-indicator-panel {
        background-color:lightgray !important;
        border:1px solid black;
        padding:0;
        margin:0;
        position: absolute;
        top: 0px;
        left: 0px;
        border: 1px solid black;
        padding: 0px;
        background-color: red;
        height:300px;
        margin:0px;
    }
    .add-indicator-panel-header {
        background-color: rgb(51,51,51);
        padding:5px;
        margin-bottom:0px;
        color:white;
    }
        .add-indicator-panel-header::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f067";
            color:white;
            padding-right:5px;
            padding-right:5px;
        }
    .add-indicator-panel-close {
        color:white;
        float:right;
    }
    .search {
        margin:0px !Important;
    }
    .add-indicator-list {
        height:219px;
        overflow-y:scroll;
        overflow-x:hidden;
    }
    .add-indicator-item-title {
        font-weight:bold;
        display:inline;
    }
    .add-indicator-item {
        font-size:small;
        display:block;
        width:100% !important;
        text-align:left !important;
        padding:5px;
    }
        .add-indicator-item::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f0da";
            color:black;
            padding-right:5px;
        }
    .clicked {
        background:#4cff00;
    }
    .included {
        background:#ff6a00;
    }
    .new-map {
        display:none;
    }
    .newrow > *:not(.cssGreen):not(.cssYellow):not(.cssRed)  {
        background-color:lightblue !important;
    }

    .prrow tr {
        -webkit-transition: all 0.30s ease-in-out;
        -moz-transition: all 0.30s ease-in-out;
        -ms-transition: all 0.30s ease-in-out;
        -o-transition: all 0.30s ease-in-out;
    }
    .prrow:hover {
        box-shadow: 0 0 10px rgba(81, 203, 238, 1);
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid rgba(81, 203, 238, 1);
    }

    .pr-edit-textarea {
        -webkit-transition: all 0.30s ease-in-out;
        -moz-transition: all 0.30s ease-in-out;
        -ms-transition: all 0.30s ease-in-out;
        -o-transition: all 0.30s ease-in-out;
    }
    .pr-edit-textarea:hover {
        box-shadow: 0 0 10px rgba(255, 106, 0, 1);;
        padding: 3px 0px 3px 3px;
        margin: 5px 1px 3px 0px;
        border: 1px solid rgba(255, 106, 0, 1);
    }

    .prheader-1 {
        font-size: 11px;
        background-color: Navy;
        color: White;
        text-align: center;
        padding: 0px;
    }

    .prheader-2 {
        font-size: 11px;
        background-color: White;
        color: Black;
        text-align: center;
        padding: 0px;
    }

    .prarea {
        font-size: 11px;
        background-color: Silver;
        text-align: justify;
        color: Black;
        padding: 5px;
    }

    .prtd-id {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        padding: 0px 2px 0px 2px;
        min-width:1%;
    }

    .prtd-title {
        font-size: 11px;
        background-color: White;
        text-align: justify;
        color: Black;
        min-width: 20% !important;
        max-width: 20% !important;
        word-wrap: break-word;
        padding: 0px 2px 0px 2px;
    }

    .prtd-id-def {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 0.05% !important;
        max-width: 0.05% !important;
        padding: 0px 2px 0px 2px;
    }

    .prtd-titleDef {
        font-size: 11px;
        background-color: White;
        text-align: justify;
        color: Black;
        min-width: 5.5% !important;
        max-width: 5.5% !important;
        word-wrap: break-word;
        padding: 0px 2px 0px 2px;
    }

    .prtd {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        max-width: 15%;
        padding: 0px;
    }

    .prtdDef {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        max-width: 15%;
        padding: 0px;
    }

    html > .prtd {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        width: 6.5%;
        width: 15%;
        padding: 0px;
    }

    .cssRed {
        font-size: 11px;
        background-color: Red;
        text-align: center;
        color: White;
        min-width: 6.5%;
        padding: 0px;
    }

    .cssGreen {
        font-size: 11px;
        background-color: Green;
        text-align: center;
        color: White;
        min-width: 6.5%;
        padding: 0px;
    }

    .cssYellow {
        font-size: 11px;
        background-color: Yellow;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        padding: 0px;
    }

    .cssWhite {
        font-size: 11px;
        background-color: White;
        text-align: center;
        color: Black;
        min-width: 6.5%;
        padding: 0px;
    }

    .inventoryEdit {
        padding: 0 0 0 0;
        margin: 0 0 0 0;
    }

    .textBox1 {
        font-size: 11px;
        width: inherit;
        padding: 0 0 0 0;
        margin: 0 0 0 0;
        border: 0;
        background-color: transparent;
        color: inherit;
    }

    table, th, td {
        border: 1px solid black;
        white-space: normal;
    }

        table tr:nth-of-type(2n) {
            background: none;
        }

    input[type="text"], textarea {
        width: 100%;
        box-sizing: border-box;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        background-color: lightgray;
    }

    .newrow, .newrow-td, .thVal, .thVal2 {
        padding: 0 0 0 0 !important;
        margin: 0 0 0 0 !important;
    }

    .newrow-text {
        margin: 0 0 0 0 !important;
    }

    }
</style>