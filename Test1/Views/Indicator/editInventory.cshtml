@using IndInv.Helpers
@using IndInv.Models
@using System.Globalization
<script src="../../Scripts/jquery-1.11.0.min.js"></script>
<script src="../../Scripts/jquery.handsontable.full.js"></script>
<script src="~/Scripts/undomanager.js"></script>
<!--script src="~/Scripts/jquery.handsontable.full.min.js"></!--script-->
<script type='text/javascript' src="http://wurfljs.com/wurfl.js"></script>
<link rel="stylesheet" media="screen" href="../../Scripts/jquery.handsontable.full.css" />
<script type="text/javascript" src="//code.jquery.com/ui/1.11.2/jquery-ui.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/numeral.js/1.4.5/numeral.min.js"></script>

@model IList<IndInv.Models.ViewModels.InventoryViewModel>
@using IndInv.Models
@{
    ViewBag.Title = "Edit Inventory Table";
    ViewBag.Buttons = "";
    foreach (var analyst in Model.FirstOrDefault().allAnalysts)
    {
        ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + analyst.Analyst_ID + " parameter=analystID >" + analyst.First_Name + "</div>";
    }
    ViewBag.Buttons += "<div id='btn' class='btnSwitch' value=" + 0 + " parameter=analystID >" + "All" + "</div>";
    ViewBag.Buttons += "<br/>";
    ViewBag.Buttons += "<div class='btn' id=showValue>Values</div>";
    ViewBag.Buttons += "<div class='btn' id=showTarget>Target</div>";
    ViewBag.Buttons += "<div class='btn' id=showDefinition>Definitions</div>";
    ViewBag.Buttons += "<div class='btn' id=showColor>Colors</div>";
    ViewBag.Buttons += "<div class='btn' id=showAll>All</div>";

    var fiscalYear = Model.FirstOrDefault().Fiscal_Year;

    ViewBag.fiscalYear = fiscalYear;
}
<div class="row">
<label>Search<input id="searchgrid" type="text" /></label>
</div>


<div class="rowLong">
    <div id="dataTable">
	</div>
</div>

<script type="text/javascript">

	$.fn.drags = function(opt) {
		opt = $.extend({handle:"",cursor:"move"}, opt);

		if(opt.handle === "") {
			var $el = this;
		} else {
			var $el = this.find(opt.handle);
		}

		return $el.css('cursor', opt.cursor).on("mousedown", function(e) {
			if(opt.handle === "") {
				var $drag = $(this).parent().addClass('draggable');
			} else {
				var $drag = $(this).addClass('active-handle').parent().addClass('draggable');
			}
			var z_idx = $drag.css('z-index'),
				drg_h = $drag.outerHeight(),
				drg_w = $drag.outerWidth(),
				pos_y = $drag.offset().top + drg_h - e.pageY,
				pos_x = $drag.offset().left + drg_w - e.pageX;
			$drag.css('z-index', 1000).parents().on("mousemove", function(e) {
				$('.draggable').offset({
					top:e.pageY + pos_y - drg_h,
					left:e.pageX + pos_x - drg_w
				}).on("mouseup", function() {
					$(this).removeClass('draggable').css('z-index', z_idx);
				});
			});
			e.preventDefault(); // disable selection
		}).on("mouseup", function() {
			if(opt.handle === "") {
				$(this).removeClass('draggable');
			} else {
				$(this).removeClass('active-handle').parent().removeClass('draggable');
			}
		});
	};

	$.fn.undrags = function(opt) {
		$(this).removeClass('draggable');
	};

	var currentMousePos = { x: -1, y: -1 };
	$(document).mousemove(function(event) {
		currentMousePos.x = event.pageX;
		currentMousePos.y = event.pageY + $('#pushobjLazy').scrollTop();
	});

	if (!Array.prototype.indexOf)
	{
		Array.prototype.indexOf = function(elt /*, from*/)
		{
			var len = this.length >>> 0;

			var from = Number(arguments[1]) || 0;
			from = (from < 0)
				 ? Math.ceil(from)
				 : Math.floor(from);
			if (from < 0)
				from += len;

			for (; from < len; from++)
			{
				if (from in this &&
					this[from] === elt)
					return from;
			}
			return -1;
		};
	}

	$(document).ready(function () {

		$(document).on('input', '#mytxtBox', function () {
		});

		function qcolor(instance, td, row, col, prop, value, cellProperties) {
			switch(prop){
				case "FY_Q1": quarter = "FY_Q1_Color"; break;
				case "FY_Q2": quarter = "FY_Q2_Color"; break;
				case "FY_Q3": quarter = "FY_Q3_Color"; break;
				case "FY_Q4": quarter = "FY_Q4_Color"; break;
				case "FY_YTD": quarter = "FY_YTD_Color"; break;
			}
			changedProp = $IndInv.handsontable("getDataAtRowProp",row, quarter)
			Handsontable.renderers.TextRenderer.apply(this, arguments);
			if (changedProp == "cssGreen"){
				td.style.background = 'green';
				td.style.color = 'white';
			}
			if (changedProp == "cssYellow"){
				td.style.background = 'yellow';
				td.style.color = 'black';
			}
			if (changedProp == "cssRed"){
				td.style.background = 'red';
				td.style.color = 'white';
			}
		};

		function compSaved(instance, td, row, col, prop, value, cellProperties) {
			Handsontable.TextCell.renderer.apply(this, arguments);
			if (cellProperties.saved) {//check for new property change in the cell
				$(td).addClass('compSaved'); //add the changeInput class to the actual td
			}
		};

		Handsontable.renderers.registerRenderer('qcolor', qcolor);
		Handsontable.renderers.registerRenderer('compSaved', compSaved);

		var maxed = false
			, resizeTimeout
			, availableWidth
			, availableHeight
			, $window = $(window)
			, $IndInv = $('#dataTable');

		var calculateSize = function () {
			var offset = $IndInv.offset();
			availableWidth = $window.width() - offset.left + $window.scrollLeft();
			availableHeight = $window.height() - offset.top + $window.scrollTop();
		};
		$window.on('resize', calculateSize);

		var values = @Html.Raw(Json.Encode(Model));

	    var filterListFull = {
	        CoE: [],
	    } 
	    for (var i=1, len=values.length; i<len; i++){
	        var filterItem = values[i]['CoE'];
	        if (filterListFull['CoE'].indexOf(filterItem) === -1){
	            filterListFull['CoE'].push(filterItem);
	        }
	    };

		var filterListChose = {
		    CoE: ['CoE'],
            Indicator: ['Indicator','']
		}
		var delay = (function(){
		    var timer = 0;
		    return function(callback, ms){
		        clearTimeout (timer);
		        timer = setTimeout(callback, ms);
		    };
		})();
		$('#searchgrid').on('keyup', function (event) {
		    var searchText = $(this).val().toLowerCase();
		    filterListChose['Indicator'][1] = searchText;
		    delay(function(){
		        doFilter();
		    }, 500);
		});
        var doFilter = function(){
			var datasrch = jQuery.makeArray(values);
			var searcharray = [];
			for (row = 0, r_len = datasrch.length; row < r_len; row++) {
			    var condArr=[];
			    $.each(filterListChose, function(index,data){
                    console.log(data)
                    var currCond = false;
				    if (data.length === 1) {
				        currCond = true;
				    } else {
				        for (var i=1, len=data.length; i<len; i++){
				            var filterItem = data[i];
				            var field = data[0];
				            var currValue = datasrch[row][field];
				            if(currValue === filterItem || filterItem === "" || ('' + currValue).toLowerCase().indexOf(filterItem) > -1){
				                currCond = true;
				            }
				            /*if(currValue === filterItem){
                                searcharray.push(datasrch[row]);
                            }*/
				        }
				    }
				    console.log(currCond)
				    condArr.push(currCond);
			    });
			    console.log(condArr)
				var allTrue = true;
				for (var i =0, len = condArr.length; i<len;i++){
				    if (condArr[i] !== true){
				        allTrue = false;
				    }
				}
				if (allTrue){
				    searcharray.push(datasrch[row]);
				}
			};
			if (searcharray.length !== 0){
			    $IndInv.handsontable('loadData', searcharray);
			} else {
			    $IndInv.handsontable('loadData', values);
			}
        };

        var colHeadersOrg = [
            "ID",
            "Indicator",
            "CoE  <i field='CoE' class='fa fa-filter filter-coe filter-button' id='filter-coe'></i>",
            "@FiscalYear.FYStrFull("FY_3",fiscalYear)",
            "Sup",
            "@FiscalYear.FYStrFull("FY_2",fiscalYear)",
            "Sup",
            "@FiscalYear.FYStrFull("FY_1",fiscalYear)",
            "Sup",
            "@FiscalYear.FYStrFull("FY_",fiscalYear)" + "_Q1",
            "Sup",
            "@FiscalYear.FYStrFull("FY_",fiscalYear)" + "_Q2",
            "Sup",
            "@FiscalYear.FYStrFull("FY_",fiscalYear)" + "_Q3",
            "Sup",
            "@FiscalYear.FYStrFull("FY_",fiscalYear)" + "_Q4",
            "Sup",
            "@FiscalYear.FYStrFull("FY_",fiscalYear)" + "_YTD",
            "Sup",
            "Target",
            "Sup",
            "Comparator",
            "Sup",
            "Performance_Threshold",
            "Sup",
            "color_ID",
            "Custom_YTD",
            "Custom_Q1",
            "Custom_Q2",
            "Custom_Q3",
            "Custom_Q4",
            "Definition_Calculation",
            "Target_Rationale",
            "Comparator_Source",
            "Data_Source_MSH",
            "Data_Source_Benchmark",
            "OPEO_Lead"
        ];
	    var columnsOrg = [
            {data:"Indicator_ID"},
            {data:"Indicator"},
            {data:"CoE"},
            {data:"FY_3"},
            {data:"FY_3_Sup"},
            {data:"FY_2"},
            {data:"FY_2_Sup"},
            {data:"FY_1"},
            {data:"FY_1_Sup"},
            {data:"FY_Q1", renderer:"qcolor"},
            {data:"FY_Q1_Sup"},
            {data:"FY_Q2", renderer:"qcolor"},
            {data:"FY_Q2_Sup"},
            {data:"FY_Q3", renderer:"qcolor"},
            {data:"FY_Q3_Sup"},
            {data:"FY_Q4", renderer:"qcolor"},
            {data:"FY_Q4_Sup"},
            {data:"FY_YTD", renderer:"qcolor"},
            {data:"FY_YTD_Sup"},
            {data:"FY_Target"},
            {data:"FY_Target_Sup"},
            {data:"FY_Comparator", renderer:"compSaved"},
            {data:"FY_Comparator_Sup"},
            {data:"FY_Performance_Threshold"},
            {data:"FY_Performance_Threshold_Sup"},
            {data:"FY_Color_ID"},
            {data:"FY_YTD_Custom_Color"},
            {data:"FY_Q1_Custom_Color"},
            {data:"FY_Q2_Custom_Color"},
            {data:"FY_Q3_Custom_Color"},
            {data:"FY_Q4_Custom_Color"},
            {data:"FY_Definition_Calculation"},
            {data:"FY_Target_Rationale"},
            {data:"FY_Comparator_Source"},
            {data:"FY_Data_Source_MSH"},
            {data:"FY_Data_Source_Benchmark"},
            {data:"FY_OPEO_Lead"}
	    ];
	    var colWidthsOrg = [50, 250, 150, 100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,200,200,200,100,100,100];
	    var changesOld = [];

		$IndInv .handsontable({
			clickBeginsEditing : WURFL.is_mobile? true:false,
			data: values,
			startRows: 1,
			startCols: 1,
			colHeaders: true,
			strechH: 'auto',
			strechW: 'auto',
			scrollH: 'auto',
			scrollV: 'auto',
			width: function () {
				if (maxed && availableWidth === void 0) {
					calculateSize();
				}
				return maxed  ?  availableWidth *0.98 : 300;
			},
			height: function () {
				if (maxed && availableHeight === void 0) {
					calculateSize();
				}
				return maxed  ?  availableHeight*0.95: 300;
			},
			fixedRowsTop: 0,
			fixedColumnsLeft: 2,
			manualColumnResize: true,
			minSpareRows: 0,
			contextMenu: false,
			rowHeaders: false,
			colHeaders: colHeadersOrg,
			columns: columnsOrg,
            colWidths : colWidthsOrg,
			afterChange: function (change, source) {
				if (source === 'loadData') {
					return;
				} else {
					for (var i = 0; i< change.length; ++i){
						updateIndicator(change, i);
					}
				}
			},
			afterChange: function (change, source) {
			    if (source === 'loadData' || source === 'set' || change === null) {
			        return;
			    } else {
			        var changes = [];
			        var changesOld = [];
			        changes = change;
			        for(var i =0, len = changes.length; i<len; i++){
			            var currChange = changes[i];
			            var currChangeOld = [];
			            currChangeOld.push(currChange[0]);
			            currChangeOld.push(currChange[1]);
			            currChangeOld.push(currChange[3]);
			            currChangeOld.push(currChange[2]);
			            changesOld.push(currChangeOld);
			        }
			        updateIndicatorUndoable(changes, changesOld);
			    }
			},
			beforeRemoveRow : function (index, amount){
				deleteIndicator(index);
			}
		});

		maxed = !maxed;
		$IndInv.handsontable('render');

		updateIndicatorUndoable = function(changes, changesOld){
		    updateIndicator(changes)
		    undoManager.add({
		        undo: function(){
		            updateIndicator(changesOld)
		        },
		        redo: function(){
		            updateIndicator(changes)
		        }
		    });
		};
		function updateIndicator(changes){
		    for (var i = 0; i< changes.length; ++i){
		        var change = changes[i];
		        var changedRow = change[0]
		        var changedParameter = change[1];
		        var changedValue = change[3];
		        var formatStr = $IndInv.handsontable("getDataAtRowProp", changedRow, "Format_Code");
		        var isString = isNaN(parseInt(changedValue.replace('$','')));
		        console.log(changedValue);
		        if (!isString){
		            if (formatStr !== ""){
		                console.log(formatStr);
		                changedValue = numeral(changedValue).format(formatStr);
		            }
		        }
		        console.log(changedValue);
		        if (changedParameter != "FY_Q1_Color" && changedParameter != "FY_Q2_Color" && changedParameter != "FY_Q3_Color" && changedParameter != "FY_Q4_Color" && changedParameter != "FY_YTD_Color"){
		            var parameters = {
		                indicatorID: $IndInv.handsontable('getDataAtCell',changedRow,0),
		                updateProperty: changedParameter,
		                updateValue: changedValue,
		                fiscalYear: @Model.FirstOrDefault().Fiscal_Year,
		            };
		            $.ajax({
		                url: this.action,
		                type: 'POST',
		                data: JSON.stringify(parameters),
		                contentType: 'application/json; charset=utf-8',
		                success: function (result) {
		                    $.get('@Url.Action("/editInventory")', {indicatorID : $IndInv.handsontable('getDataAtCell',changedRow,0), fiscalYear: @Model.FirstOrDefault().Fiscal_Year}, function (data) {
		                        $IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q1_Color", data[0].FY_Q1_Color, 'set');
		                        $IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q2_Color", data[0].FY_Q2_Color, 'set');
		                        $IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q3_Color", data[0].FY_Q3_Color, 'set');
		                        $IndInv.handsontable("setDataAtRowProp", changedRow, "FY_Q4_Color", data[0].FY_Q4_Color, 'set');
		                        $IndInv.handsontable("setDataAtRowProp", changedRow, "FY_YTD_Color", data[0].FY_YTD_Color, 'set');
		                    });
		                },
		                error: function (request){
		                }
		            });
		        }
		        $IndInv.handsontable("setDataAtRowProp", changedRow, changedParameter, changedValue, 'set');
		    }
		}

		function deleteIndicator(index){
			var parameters = {
				indicatorID: $IndInv.handsontable('getDataAtCell',index,0),
			};
			$.ajax({
				url: 'deleteInventory',
				type: 'POST',
				data: JSON.stringify(parameters),
				contentType: 'application/json; charset=utf-8',
				success: function (result) {
				},
				error: function (request){
				}
			});
		}  

		var showColumns = function(){
		    var colHeaders = colHeadersOrg
		    var columns = columnsOrg;
		    var colWidths = colWidthsOrg;

		    var colHeadersOld = []
		    var columnsOld = [];
		    var colWidthsOld = []

		    var th = $('thead').children();
		    for(var i =0, len = $IndInv.handsontable("countCols"); i<=len; i++){
		        var currHeader = $IndInv.handsontable("getColHeader",i);
		        var colWidth = th.find(':contains(' + currHeader + ')').first().width();
		        columnsOld.push( { data : $IndInv.handsontable("colToProp",i) })
		        colHeadersOld.push(currHeader)
		        colWidthsOld.push(colWidth);
		    };
		    var table = $IndInv.handsontable('getInstance');
		    updateColumnsUndoable(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld);
		}

		var hideColumns = function(toHide){
		    var toHideHeaders = [];
		    $.each(toHide, function(index, value){
		        var colHeader = $(this).find('.colHeader')[0].innerHTML;
		        toHideHeaders.push(colHeader)
		    });
		    var colHeaders = []
		    var columns = [];
		    var colWidths = []

		    var colHeadersOld = []
		    var columnsOld = [];
		    var colWidthsOld = []

		    var th = $('thead').children();
		    for(var i =0, len = $IndInv.handsontable("countCols"); i<=len; i++){
		        var currHeader = $IndInv.handsontable("getColHeader",i);
		        var colWidth = th.find(':contains(' + currHeader + ')').first().width();
		        if (toHideHeaders.indexOf(currHeader) === -1){
		            columns.push( { data : $IndInv.handsontable("colToProp",i), renderer: $IndInv.handsontable("getCellRenderer",1,i)})
		            colHeaders.push(currHeader)
		            colWidths.push(colWidth);
		        }
		        columnsOld.push( { data : $IndInv.handsontable("colToProp",i), renderer: $IndInv.handsontable("getCellRenderer",1,i)})
		        colHeadersOld.push(currHeader)
		        colWidthsOld.push(colWidth);
		    };
		    var table = $IndInv.handsontable('getInstance');
		    updateColumnsUndoable(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld);
		};
		updateColumnsUndoable = function(table, columns,colHeaders,colWidths,columnsOld,colHeadersOld,colWidthsOld){
		    updateColumns(table, columns,colHeaders,colWidths);
		    undoManager.add({
		        undo: function(){
		            updateColumns(table, columnsOld,colHeadersOld,colWidthsOld);
		        },
		        redo: function(){
		            updateColumns(table, columns,colHeaders,colWidths);
		        }
		    });
		};

		var selectedCellsRange;
		$(document.body).on("contextmenu:focus", ".context-menu-item", function(e){ 
			selectedCellsRange = $IndInv.handsontable("getSelected");
		});

		var selectHeader = $('table > thead').selectable({
		    distance: 1,
		    fiter:'.prheader',
		    start: function(event, ui){
		        
		    }
		})
		var unselect = function(){$('th.ui-selected').removeClass('ui-selected')};

		$(document).on('click','.filter-button', function(e){
		    var el = $(this);
		    var elTH = $(this).closest('th');
		    var filtered = elTH.hasClass('filtered')
		    var filters = [];
		    var filterAvailable = [];
		    var field = el.attr('field');//that.innerHTML;//$(this).find('.colHeader')[0].innerHTML;
		    var dataArr = [];

		    $.each($IndInv.handsontable("getData"),function(index,data){
		        var filter = data[field];
		        if (filterAvailable.indexOf(filter) === -1){
		            filterAvailable.push(filter);
		        }
		    });

		    if (filtered){
		        filters = filterListFull[field]
		    } else {
		        filters = filterAvailable;
		    }

		    var newDiv = "<div class='filter-panel'>"
		    newDiv += "<div class='filter-panel-header'>Filter by: " + field + "<i class='filter-panel-close fa fa-times'></i></div>"
		    newDiv += "<input class='search' id='search_filter' name='Search' type='search' placeholder='Search' />"
		    newDiv += "<div class='filter-list'><div>"
		    $.each(filters, function(index,value){
		        var checked = "";
		        if (filtered){
		            if(filterAvailable.indexOf(value) !== -1){
		                checked = "clicked"
		            }
		        }
		        newDiv += "<div class='filter-item " + checked + "'><div class='filter-title'>" + value + "</div></div>";
		    });
		    newDiv += "</div></div>"
		    newDiv += "</div>"
		    $('.header').after(newDiv);
		    $('.filter-panel').hide();
		    $('.filter-panel').slideDown('slow');
		    $('.filter-panel').css({
		        left:  currentMousePos.x,
		        top:   currentMousePos.y
		    });
		    $('#search_filter').on('keyup change search click', function () {
		        var valThis = $(this).val().toLowerCase();
		        if (valThis == "") {
		            $('.filter-item').removeClass('textFiltered');
		        } else {
		            $('.filter-item').each(function () {
		                var text = $(this).text().toLowerCase();
		                var listItems;
		                if (text.indexOf(valThis) >= 0) {
		                    $(this).removeClass('textFiltered');
		                } else {
		                    $(this).addClass('textFiltered');
		                }
		            });
		        };
		        $('.filter-item').show();
		        $('.textFiltered').hide();
		    });

		    $('.filter-panel-close').on('click', function(){
		        $(this).closest('filter-panel').undrags();
		        $(this).closest('.filter-panel').slideUp('slow',function() { $(this).remove()});
		        $('.new-map').remove()
		    });

		    $('.filter-item').on('click', function(){
		        var filterItem = $(this).children()[0].innerHTML;
		        if (!$(this).hasClass('clicked')){
		            $(this).addClass('clicked');
		            if (filterListChose[field].indexOf(filterItem) === -1){
		                filterListChose[field].push(filterItem);
		                doFilter();
		            }
		        } else {
		            $(this).removeClass('clicked');
		            filterListChose[field] = $.grep(filterListChose[field], function(value){
		                return value != filterItem;
		            });
		            doFilter();
		        }
		        if(filterListChose[field].length !== 1){
		            elTH.addClass('filtered');
		        }else {
		            elTH.removeClass('filtered');
		        }
		    });
		});

		$('#the-node2').contextMenu({
			selector: 'th',
			callback: function(key, options){
			},
			items: {
				hideCol: {
				    name: "Hide Column",
				    callback: function(key,options){
				        var toHide = $("th.ui-selected");
				        if (toHide.length === 0) toHide= $(this);
				        hideColumns(toHide);
				        unselect();
				    }
				},
				showCol: {
				    name: "Unhide Columns",
				    callback: function(key,options){
				        showColumns();
				        unselect();
				    }
				}

			}
		});

		$('#the-node').contextMenu({
			selector: 'td', 
			callback: function(key, options) {
				
			},

			items: {
				"addNValues": {
					name: "Add N Values to this Indicator",
					callback: function(key,options){
						var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
						var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;
						addNValuesUndoable(row, indicatorID);
					}
				},

				"saveComperatorValue":{
					"name": "Save Comparator Value",
					"items": {
						"toQ1": {
							name: "Q1",
							callback: function(key,options){
								var toSave = [];
								for(var r = selectedCellsRange[0], fR = selectedCellsRange[2]; r <= fR; r++){
									for(var c = selectedCellsRange[1], fC = selectedCellsRange[3]; c <= fC; c++){
										toSave.push($IndInv.handsontable("getCell",r,c));
									}
								}
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 1;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ2": {
							name: "Q2",
							callback: function(key,options){
								var toSave = $(".ui-selected");
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 2;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ3": {
							name: "Q3",
							callback: function(key,options){
								var toSave = $(".ui-selected");
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 3;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
						"toQ4": {
							name: "Q4",
							callback: function(key,options){
								var toSave = $(".ui-selected");
								if (toSave.length === 0){
									toSave.push($(this));
								}
								var fields = [];
								var fieldQs = [];
								var values = [];
								var oldValues = [];
								var elements = [];
								$.each(toSave, function(index,value){
									var col = $(this).parent().children().index($(this)) + $IndInv.handsontable("colOffset");
									var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
									var quarter = 4;
									var field = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator";
									var fieldQ = "@FiscalYear.FYStrFull("FY_", fiscalYear)" + "Comparator_Q" + quarter;
									var value = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator");
									//var value =  $(this).first().parent().children('[field="' + field +'"]').children('.pr-input').first().val();
									var oldValue = $IndInv.handsontable("getDataAtRowProp",row, "FY_Comparator_Q" + quarter);
									//var Oldvalue =  $(this).first().parent().children('[field="' + fieldQ +'"]').children('.pr-input').first().val();
									fields.push(field);
									fieldQs.push(fieldQ);
									values.push(value);
									oldValues.push(oldValue);
									//elements.push($(this));
									elements.push($IndInv.handsontable("getCell",row,col));
								});
								saveComparatorUndoable(elements, fields, fieldQs, values, oldValues);
							}
						},
					}
				},
			}
		});

		saveComparatorUndoable = function(elements, fields, fieldQs, values, oldValues){
			saveComparator(elements, fields, fieldQs, values, oldValues);
			undoManager.add({
				undo: function(){
					saveComparator(elements, fields, fieldQs, oldValues, values, true);
				},
				redo: function(){
					saveComparator(elements, fields, fieldQs, values, oldValues);
				}
			});
		};
		saveComparator =function(elements, fields, fieldQs, values, oldValues, undo){
			$.each(elements, function(index,value){
				var indicatorID = $(this).closest( "tr" ).children().first()[0].innerHTML;

				var colComp = $IndInv.handsontable("propToCol",'FY_Comparator');
				var row = $(this).parent().parent().children().index($(this).parent()) + $IndInv.handsontable("rowOffset");
				if (undo !== true){
					//$(this).first().parent().children('[field="' + fields[index] +'"]').addClass('comp-saved');
					$IndInv.handsontable("getCellMeta",row,colComp).saved=true;
				} else {
					$IndInv.handsontable("getCellMeta",row,colComp).saved=false;
				}
				$IndInv.handsontable("render");

				var parameters = {
					indicatorID: indicatorID,
					updateProperty: fieldQs[index],
					updateValue: values[index],
					updateValueSup: "%NULL%",
					fiscalYear: @Model.FirstOrDefault().Fiscal_Year,
    			};
    			$.ajax({
    				url: 'setValue',
    				type: 'POST',
    				data: JSON.stringify(parameters),
    				contentType: 'application/json; charset=utf-8',
    				success: function (result) {
    				},
    				error: function (request){
    				}
    			});
    		});
		};

		addNValuesUndoable = function(row, indicatorID){
			addNValues(row, indicatorID);
			undoManager.add({
				undo: function(){
					var removeObj = clickedCell.closest('tr').next().first();
					var indicatorID = removeObj.attr('indicatorID');
					removeIndicator(removeObj, indicatorID);
				},
				redo: function(){
					addNValues(row, indicatorID);
				}
			});
		};
		addNValues = function(row, indicatorID){
			$IndInv.handsontable('alter','insert_row', row + 1);
			$IndInv.handsontable('render');
			$.post('addNValues', { indicatorID : indicatorID, fiscalYear: @ViewBag.fiscalYear }, function(returnedData){
				var indicatorID_N = returnedData.indicatorID;
				var cols = $IndInv.handsontable("getDataAtRow",row  + 1);
				$.each(cols,function(index, obj){
					var field = index;
					$.ajax({
						url: 'getValue',
						type: 'GET',
						async: 'false',
						data: { indicatorID: indicatorID_N, field:field, fiscalYear: '@fiscalYear', convertToFull: true },
						contentType: 'application/json; charset=utf-8',
						success: function (result) {
							$IndInv.handsontable("setDataAtRowProp",row + 1,field,result.Value);
						}
					});
				});
				$IndInv.handsontable("setDataAtCell",row + 1,1,indicatorID_N);
    		});
		}

		undoManager = new UndoManager();
		$.ctrl = function(key, callback, args) {
			var isCtrl = false;
			$(document).on('keydown',function(e) {
				if(!args) args=[]; // IE barks when args is null
        
				if(e.ctrlKey) isCtrl = true;
				if(e.keyCode == key.charCodeAt(0) && isCtrl) {
					callback.apply(this, args);
					return false;
				}
			}).keyup(function(e) {
				if(e.ctrlKey) isCtrl = false;
			});        
		};

		$.ctrl("Z", function(){
			undoManager.undo();
		});

		$.ctrl("Y", function(){
			undoManager.redo();
		});

	    //$('#showColor').on('click', function () {
        var updateColumns = function(table, columns, colHeaders, colWidths){
		    table.updateSettings({
		        strechH: 'last',
		        colWidths: colWidths,//[50, 250, 150, 100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,500,500,500,100,100,100,100,100,100,100],
		        colHeaders: colHeaders,
		        columns: columns
		    });
		};
	});
</script>


<style>

	.rowLong {padding-left:40px;}

    th {
    border-right:none !important;
    white-space: normal !important;
font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
font-weight:300;
font-size:medium!important;
}
    td {
            white-space: normal !important;
font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;
font-weight:300;
font-size:medium!important;
    }
    label {
        color:lightgray;
    }

	#dataTable th, #dataTable td {
       overflow: hidden;
       text-overflow: ellipsis;
       white-space:nowrap !important;
  }

	.handsontableInput {
		overflow-y:scroll !important;
		font-size:0.5em;
		resize:vertical !important;
	}

	.compSaved {
		background-color: #0063FF !important;
        color: White;
	}

	.filter-panel {
        background-color:lightgray !important;
        border:1px solid black;
        padding:0;
        margin:0;
        position: absolute;
        top: 0px;
        left: 0px;
        border: 1px solid black;
        padding: 0px;
        background-color: red;
        height:300px;
        margin:0px;
    }
    .filter-panel-header {
        background-color: rgb(51,51,51);
        padding:5px;
        margin-bottom:0px;
        color:white;
    }
        .filter-panel-header::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f067";
            color:white;
            padding-right:5px;
            padding-right:5px;
        }
    .filter-panel-close {
        color:white;
        float:right;
    }
    .search {
        margin:0px !Important;
    }
    .filter-list {
		color:black;
        height: 219px;
        overflow-y:scroll;
        overflow-x:hidden;
		float:left;
		width:100%;
    }
    .filter-item-title {
        font-weight:bold;
        display:inline;
    }
    .filter-item {
        font-size:small;
        display:block;
        width:100% !important;
        text-align:left !important;
        padding:5px;
    }
        .filter-item::before {
            float:left;
            font-family: FontAwesome;
            /*font-size:large;*/
            content: "\f0da";
            color:black;
            padding-right:5px;
        }
    .clicked {
        background:#4cff00;
    }
    .included {
        background:#ff6a00;
    }
     th.ui-selecting {
        background-color:#ff6a00;
    }
    th.ui-selected {
        background-color:#ff6a00;
    }

    .filter-button:hover {
        color:#0063FF;
    }
    .filtered > div > span > i {
        color:red;
    }

    }
</style>